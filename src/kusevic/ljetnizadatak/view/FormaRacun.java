/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kusevic.ljetnizadatak.view;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import kusevic.ljetnizadatak.controller.Obrada;
import kusevic.ljetnizadatak.model.Korisnik;
import kusevic.ljetnizadatak.model.Racun;
import kusevic.ljetnizadatak.model.Radnik;
import kusevic.ljetnizadatak.model.Transakcija;
import kusevic.ljetnizadatak.pomocno.HibernateUtil;
import org.hibernate.Session;

/*
 * @author Tomislav
 */
public class FormaRacun extends Forma<Racun> implements EnablingButtons {

    private static FormaRacun instance = null;
    
    
    private boolean uisplata = true;
    private boolean novi = true;
    List<Racun> rezultati;
    List<Racun> brojElemenata;
    private BigInteger brojRacun = new BigInteger("10000000000");
    private BigInteger broj = BigInteger.ZERO;
    private Transakcija transakcija;
    List<Korisnik> korisnici;
    List<Radnik> radnici;
    Radnik radnik;
    private Session session;
    Korisnik korisnik;
    Obrada obrada;
    String primljeniRacun;
    
    public FormaRacun(boolean novi)
    {
        
        session= HibernateUtil.getSession();
        initComponents();
        nakonInitComponents();
        obrada = new Obrada<>();
        spremi_novi();
        ucitaj();
    }
    
    public static FormaRacun getInstance() {
        if(instance == null) {
        instance = new FormaRacun();
    }
        return instance;
    }

    
    protected FormaRacun(String primljeniRacun){
        

        
        this.primljeniRacun = primljeniRacun;
        session = HibernateUtil.getSession();
        initComponents();
        nakonInitComponents();
        btnNoviRacun.setVisible(false);
        obrada = new Obrada();
        ucitajKorisnike();
        ucitajRadnike();
        provjeriJelOdabran();
        
        rezultati = HibernateUtil.getSession().createQuery("FROM Racun WHERE obrisan=false AND brojRacuna=:uvjet").setString("uvjet", primljeniRacun).list();
        
         DefaultTableModel model = new DefaultTableModel();

        model.addColumn("Objekt");
        model.addColumn("Datum otvaranja");
        model.addColumn("Broj racuna");
        model.addColumn("Stanje racuna");

        tablicaRacun.setModel(model);
        rezultati.forEach((s) -> {
            model.addRow(new Object[]{s, s.getDatumKreiranja(), s.getBrojRacuna(), s.getStanjeRacuna()});
        });
        tablicaRacun.getColumnModel().getColumn(0).setWidth(0);
        tablicaRacun.getColumnModel().getColumn(0).setMinWidth(0);
        tablicaRacun.getColumnModel().getColumn(0).setMaxWidth(0);

        tablicaRacun.requestFocus();
        tablicaRacun.changeSelection(0, 0, false, false);
        tablicaRacun.setRowSelectionInterval(0, 0);
        this.entitet = (Racun) tablicaRacun.getModel().getValueAt(tablicaRacun.getSelectedRow(), 0);
        for (Korisnik korisnik : korisnici) {
            if(korisnik.getRacun().equals(entitet.getBrojRacuna())){
                this.korisnik=korisnik;
            }
        }
        txtK.setText(korisnik.getIme() + " " + korisnik.getPrezime());
        
       }
        
    public FormaRacun() {
        session = HibernateUtil.getSession();
        initComponents();
        nakonInitComponents();
        obrada = new Obrada<>();
        ucitajKorisnike();
        ucitajRadnike();
        DefaultTableModel model = new DefaultTableModel();

        rezultati = HibernateUtil.getSession().createQuery("FROM Racun WHERE obrisan=false").list();
        rezultati.forEach((s) -> {
            model.addRow(new Object[]{s, s.getDatumKreiranja(), s.getBrojRacuna(), s.getStanjeRacuna()});
        });
        ucitavanje();
        provjeriJelOdabran();
        btnIsplata.setVisible(false);
        btnUplata.setVisible(false);
        btnNoviRacun.setVisible(false);
        txtIznos.setVisible(false);
        jLabel4.setVisible(false);
        jLabel2.setVisible(false);
        cmbRadnik.setVisible(false);
        jSeparator1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablicaRacun = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnNoviRacun = new javax.swing.JButton();
        btnIsplata = new javax.swing.JButton();
        txtIznos = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        btnUplata = new javax.swing.JButton();
        greska = new javax.swing.JLabel();
        cmbRadnik = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtK = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Racun");
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBackground(new java.awt.Color(38, 40, 55));

        tablicaRacun.setFont(new java.awt.Font("Apple Braille", 0, 14)); // NOI18N
        tablicaRacun.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablicaRacun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablicaRacunMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablicaRacun);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(55, 56, 76));
        jPanel2.setForeground(new java.awt.Color(102, 178, 255));

        btnNoviRacun.setBackground(new java.awt.Color(55, 56, 76));
        btnNoviRacun.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        btnNoviRacun.setForeground(new java.awt.Color(102, 178, 255));
        btnNoviRacun.setText("NOVI RAÄŒUN");
        btnNoviRacun.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNoviRacun.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNoviRacun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoviRacunActionPerformed(evt);
            }
        });

        btnIsplata.setBackground(new java.awt.Color(55, 56, 76));
        btnIsplata.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        btnIsplata.setForeground(new java.awt.Color(102, 178, 255));
        btnIsplata.setText("ISPLATA");
        btnIsplata.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnIsplata.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIsplata.setEnabled(false);
        btnIsplata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIsplataActionPerformed(evt);
            }
        });

        txtIznos.setBackground(new java.awt.Color(55, 56, 76));
        txtIznos.setFont(new java.awt.Font("Arial Unicode MS", 0, 24)); // NOI18N
        txtIznos.setForeground(new java.awt.Color(204, 204, 204));
        txtIznos.setBorder(null);

        jLabel2.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 178, 255));
        jLabel2.setText("RADNIK");

        btnUplata.setBackground(new java.awt.Color(55, 56, 76));
        btnUplata.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        btnUplata.setForeground(new java.awt.Color(102, 178, 255));
        btnUplata.setText("UPLATA");
        btnUplata.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUplata.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUplata.setEnabled(false);
        btnUplata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUplataActionPerformed(evt);
            }
        });

        greska.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        greska.setForeground(new java.awt.Color(255, 0, 0));

        cmbRadnik.setBackground(new java.awt.Color(55, 56, 76));
        cmbRadnik.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        cmbRadnik.setForeground(new java.awt.Color(102, 178, 255));
        cmbRadnik.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 178, 255));
        jLabel3.setText("KORISNIK");

        jLabel4.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 178, 255));
        jLabel4.setText("IZNOS");

        txtK.setBackground(new java.awt.Color(55, 56, 76));
        txtK.setFont(new java.awt.Font("Arial Unicode MS", 0, 24)); // NOI18N
        txtK.setForeground(new java.awt.Color(102, 178, 255));
        txtK.setBorder(null);
        txtK.setCaretColor(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnUplata, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(btnNoviRacun, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIsplata, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIznos, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                            .addComponent(cmbRadnik, 0, 244, Short.MAX_VALUE)
                            .addComponent(greska, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                            .addComponent(txtK, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(greska, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIznos, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbRadnik, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtK, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUplata, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIsplata, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNoviRacun, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void ucitaj() {
        DefaultTableModel model = new DefaultTableModel();

        rezultati = HibernateUtil.getSession().createQuery("FROM Racun WHERE obrisan=false AND brojRacuna=:uvjet").setString("uvjet", primljeniRacun).list();
        rezultati.forEach((s) -> {
            model.addRow(new Object[]{s, s.getDatumKreiranja(), s.getBrojRacuna(), s.getStanjeRacuna()});
        });
        ucitavanje();
    }

    private void ucitajKorisnike() {
        korisnici = HibernateUtil.getSession().createQuery("FROM Korisnik WHERE obrisan=false").list();

    }

    private void ucitajRadnike() {
        radnici = HibernateUtil.getSession().createQuery("FROM Radnik WHERE obrisan=false").list();
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        cmbRadnik.setModel(model);

        for (Radnik r : radnici) {
            model.addElement(r);
            cmbRadnik.setSelectedItem(r);
        }
    }

    public void ucitavanje() {
        DefaultTableModel model = new DefaultTableModel();

        model.addColumn("Objekt");
        model.addColumn("Datum otvaranja");
        model.addColumn("Broj racuna");
        model.addColumn("Stanje racuna");

        tablicaRacun.setModel(model);
        rezultati.forEach((s) -> {
            model.addRow(new Object[]{s, s.getDatumKreiranja(), s.getBrojRacuna(), s.getStanjeRacuna()});
        });
        tablicaRacun.getColumnModel().getColumn(0).setWidth(0);
        tablicaRacun.getColumnModel().getColumn(0).setMinWidth(0);
        tablicaRacun.getColumnModel().getColumn(0).setMaxWidth(0);

    }

    @Override
    public void provjeriJelOdabran() {
        tablicaRacun.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            btnIsplata.setEnabled(true);
            btnUplata.setEnabled(true);
        });
    }

    @Override
    protected void spremi() {
        BigDecimal dodatak = null;
        try{
         dodatak = new BigDecimal(txtIznos.getText());
        }catch(NumberFormatException e)
        {
            greska.setText("Nije dobar unos");
            return;
        }
        BigDecimal pocetak;
        BigDecimal kraj;
        if (uisplata) {
            pocetak = new BigDecimal(entitet.getStanjeRacuna());
            kraj = pocetak.add(dodatak);
        } else {
            pocetak = new BigDecimal(entitet.getStanjeRacuna());
            kraj = pocetak.add(dodatak.negate());
        }
        entitet.setStanjeRacuna(kraj.toString());
        if (new BigDecimal(entitet.getStanjeRacuna()).compareTo(new BigDecimal("0.00")) == -1) {
            greska.setText("NEDOVOLJAN IZNOS NA RACUNU!");
            entitet.setStanjeRacuna(pocetak.toString());
        } else {
            this.entitet.setStanjeRacuna(kraj.toString());
            provediTransakciju();
            super.spremi();

        }
    }

    protected void spremi_novi() {

        entitet = new Racun(true);
        System.out.println(entitet.getDatumKreiranja());
        obrada.save(entitet);

    }


    private void tablicaRacunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablicaRacunMouseClicked
         korisnik = new Korisnik();
        this.entitet = (Racun) tablicaRacun.getModel().getValueAt(tablicaRacun.getSelectedRow(), 0);
        for (Korisnik korisnik : korisnici) {
            if(korisnik.getRacun().equals(entitet.getBrojRacuna())){
                this.korisnik=korisnik;
            }
        }
        txtK.setText(korisnik.getIme() + " " + korisnik.getPrezime());
    }//GEN-LAST:event_tablicaRacunMouseClicked

    private void btnUplataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUplataActionPerformed
        
        uisplata = true;
        greska.setText("");
        
        spremi();
        ucitaj();
        
    }//GEN-LAST:event_btnUplataActionPerformed

    private void btnIsplataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIsplataActionPerformed

        greska.setText("");
        uisplata = false;
        spremi();
        ucitaj();
    }//GEN-LAST:event_btnIsplataActionPerformed

    private void provediTransakciju() {

        transakcija = new Transakcija();
        transakcija.setDatum(new Date());
        if (uisplata == true) {
            transakcija.setIznos(new BigDecimal(txtIznos.getText()));
        } else {
            transakcija.setIznos(new BigDecimal(txtIznos.getText()).negate());
        }
        radnik = (Radnik) cmbRadnik.getSelectedItem();
        transakcija.setRadnik(radnik);
        transakcija.setKorisnik(korisnik);
        transakcija.setRacun(entitet);
        transakcija = spremiTransakciju(transakcija);

    }

    public Transakcija spremiTransakciju(Transakcija entitet) {
        Date d = new Date();

        if (entitet.getSifra() == null) {
            entitet.setDatumKreiranja(d);
            entitet.setObrisan(false);
        }
        entitet.setDatumPromjene(d);
        session.beginTransaction();
        session.saveOrUpdate(entitet);
        session.getTransaction().commit();
        return entitet;
    }


    private void btnNoviRacunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoviRacunActionPerformed

        spremi_novi();
        ucitaj();
    }//GEN-LAST:event_btnNoviRacunActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIsplata;
    private javax.swing.JButton btnNoviRacun;
    private javax.swing.JButton btnUplata;
    private javax.swing.JComboBox<Radnik> cmbRadnik;
    private javax.swing.JLabel greska;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tablicaRacun;
    private javax.swing.JTextField txtIznos;
    private javax.swing.JTextField txtK;
    // End of variables declaration//GEN-END:variables

}
